# syntax=docker/dockerfile:1
ARG IMAGE=nvcr.io/nvidia/tensorflow:22.02-tf2-py3
FROM ${IMAGE}

# Args
ARG CORE_VER=v0.1.1
ARG NVTAB_VER=main
ARG MODELS_VER=main
ARG HUGECTR_VER=master

ARG CMAKE_VER=3.22.3 \
    HADOOP_VER=3.3.2 \
    HIREDIS_VER=1.0.2 \
    HWLOC_VER=2.4.1 \
    PROTOC_VER=3.19.4 \
    RDKAFKA_VER=1.8.2 \
    REDIS_PP_VER=1.3.3 \
    ROCKSDB_VER=6.29.3

ARG INSTALL_HDFS=true \
    BUILD_HADOOP=true
    


# -----------------------------------------------------------------------------
#   OVERVIEW
#
#   0 = Revise system configuration.
#   1 = Third-party compilers and make tools.
#   2 = Third-party packages that are frequently needed.
#   3 = Dependencies of Merlin, Merlin NVTabular, Merlin Transformers4rec, etc.
#   4 = Dependencies of Merlin HugeCTR
#   5 = NVIDIA Merlin, Merlin NVTabular, Merlin Transformers4rec, Merlin Models
#   6 = NVIDIA Merlin HugeCTR
#   ...
#   9 = Runtime customization.
#



# -----------------------------------------------------------------------------
#   [ 0 ]  Revise system configuration.

ARG DEBIAN_FRONTEND=noninteractive
RUN apt-get update -y --fix-missing && \
    apt-get install -y --no-install-recommends \
        # [ 1 ] Required to build CMake.
            libssl-dev \
        # [ 2 ] Required to build Protocol Buffers.
            autoconf automake libtool \
        # [ 4.2 ] Required to build RocksDB.
            libgflags-dev \
            zlib1g-dev libbz2-dev libsnappy-dev liblz4-dev libzstd-dev \
        # [ 4.3 ] Required to build RdKafka.
            zlib1g-dev libzstd-dev \
            libssl-dev libsasl2-dev \
        # [ 4.4 ] Required to build Hadoop.
            default-jdk maven \
            libpmem-dev \
            libsasl2-dev libssl-dev \
            libsnappy-dev libzstd-dev zlib1g-dev \
        # [ 4.4 ] Required to run Hadoop.
            openssh-server \
        # [ 6 ] Required to build HugeCTR.
            libaio-dev libtbb-dev \
            clang-format && \
    apt-get remove -y --purge cmake -y && \
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

ENV CUDA_HOME=/usr/local/cuda \
    JAVA_HOME=/usr/lib/jvm/default-java
ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib:${JAVA_HOME}/lib:${JAVA_HOME}/lib/server



# -----------------------------------------------------------------------------
#   [ 1 ]   Build and install "newer" version CMake.

RUN git clone --branch v${CMAKE_VER} --depth 1 https://github.com/Kitware/CMake.git cmake && \
    cd cmake && \
    ./bootstrap && \
    make -j$(nproc) && \
    make install && \
    cd .. && \
    rm -rf cmake && \
    echo "CMake version: $(cmake --version)"



# -----------------------------------------------------------------------------
#   [ 2 ]   Build and install protocol buffers (required by Arrow and HugeCTR/HDFS)

RUN git clone --branch v${PROTOC_VER} --depth 1 https://github.com/protocolbuffers/protobuf.git protobuf && \
    cd protobuf && \
    git submodule update --init --recursive && \
    ./autogen.sh && \
    ./configure && \
    make -j$(nproc) && \
    make install && \
    cd .. && \
    rm -rf protobuf && \
    ldconfig && \
    echo "Protocol Buffers version: $(protoc --version)"



# -----------------------------------------------------------------------------
#   [ 4.1 ]   Build and install Redis native client.

RUN git clone --branch v${HIREDIS_VER} --depth 1 https://github.com/redis/hiredis.git hiredis && \
    mkdir hiredis/build && \
    cd hiredis/build && \
    cmake .. && \
    make -j$(nproc) && \
    make install && \
    cd ../.. && \
    rm -rf hiredis

RUN git clone --branch ${REDIS_PP_VER} --depth 1 https://github.com/sewenew/redis-plus-plus.git redis_pp && \
    mkdir redis_pp/build && \
    cd redis_pp/build && \
    cmake -DREDIS_PLUS_PLUS_CXX_STANDARD=17 .. && \
    make -j$(nproc) && \
    make install && \
    cd ../.. && \
    rm -rf redis_pp



# -----------------------------------------------------------------------------
#   [ 4.2 ]   Build and install RocksDB.

RUN git clone --branch v${ROCKSDB_VER} --depth 1 https://github.com/facebook/rocksdb.git rocksdb && \
    cd rocksdb && \
    PORTABLE=1 make -j$(nproc) shared_lib && \
    make install-shared && \
    cd .. && \
    rm -rf rocksdb



# -----------------------------------------------------------------------------
#   [ 4.3 ]   Build and install RdKafka.

RUN git clone --branch v${RDKAFKA_VER} --depth 1 https://github.com/edenhill/librdkafka.git rdkafka && \
    cd rdkafka && \
    ./configure --enable-static && \
    make -j$(nproc) && \
    make install && \
    cd .. && \
    rm -rf rdkafka



# -----------------------------------------------------------------------------
#   [ 4.4 ]   Build and install hadoop + HDFS native client.

ENV HADOOP_HOME=/opt/hadoop
ENV PATH=${PATH}:${HADOOP_HOME}/bin:${HADOOP_HOME}/sbin \
    HDFS_NAMENODE_USER=root \
    HDFS_SECONDARYNAMENODE_USER=root \
    HDFS_DATANODE_USER=root \
    YARN_RESOURCEMANAGER_USER=root \
    YARN_NODEMANAGER_USER=root \
    # Tackles with ThreadReaper stack overflow issues: https://bugs.openjdk.java.net/browse/JDK-8153057
    LIBHDFS_OPTS='-Djdk.lang.processReaperUseDefaultStackSize=true' \
    # Tackles with JVM setting error signals that UCX library will check (GitLab issue #425).
    UCX_ERROR_SIGNALS='' \
    CLASSPATH=${CLASSPATH}:\
/opt/hadoop/etc/hadoop/*:\
/opt/hadoop/share/hadoop/common/*:\
/opt/hadoop/share/hadoop/common/lib/*:\
/opt/hadoop/share/hadoop/hdfs/*:\
/opt/hadoop/share/hadoop/hdfs/lib/*:\
/opt/hadoop/share/hadoop/mapreduce/*:\
/opt/hadoop/share/hadoop/yarn/*:\
/opt/hadoop/share/hadoop/yarn/lib/*

# TODO: There is a potential conflict with protocol buffers. The native package will be overriden by the python package.
COPY *-hadoop.sh ./
RUN if [[ "${INSTALL_HDFS}" == "true" || "${BUILD_HADOOP}" == "true" ]]; then \
        ./build-hadoop.sh "${HADOOP_VER}" \
    ; fi && \
    if [[ "${INSTALL_HDFS}" == "true" ]]; then \
        ./install-hadoop.sh "${HADOOP_VER}" \
    ; fi



# -----------------------------------------------------------------------------
#   [ 4.5 ]   Build and install CUDA-aware hwloc.

RUN cd /opt/hpcx/ompi/include/openmpi/opal/mca/hwloc/hwloc201 && rm -rf hwloc201.h hwloc/include/hwloc.h
RUN wget -q -nc --no-check-certificate https://download.open-mpi.org/release/hwloc/v2.4/hwloc-${HWLOC_VER}.tar.gz && \
    mkdir hwloc && \
    tar xf hwloc-${HWLOC_VER}.tar.gz --strip-components 1 --directory hwloc && \
    rm hwloc-${HWLOC_VER}.tar.gz && \
    cd hwloc && \
    ./configure CPPFLAGS="-I${CUDA_HOME}/include -L${CUDA_HOME}/lib64" LDFLAGS="-L${CUDA_HOME}/lib64" --enable-cuda && \
    make -j$(nproc) && \
    make install && \
    cd .. && \
    rm -rf hwloc && \
    LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$(dirname $(find / -name 'libcuda.so.1' | head -n 1)) && \
    if [ ! -f "/usr/local/lib/libnvidia-ml.so.1" ]; then \
        ln -s $(find / -name "libnvidia-ml.so*") "/usr/local/lib/libnvidia-ml.so.1" && \
        echo "hwloc version: $(hwloc-info --version)" && \
        rm -rf "/usr/local/lib/libnvidia-ml.so.1" \
    ; else \
        echo "hwloc version: $(hwloc-info --version)" \
    ; fi



# -----------------------------------------------------------------------------
#   [ 5.1 ]   Build and install NVIDIA Merlin Core.

RUN git clone --branch ${CORE_VER} --depth 1 https://github.com/NVIDIA-Merlin/core.git /core && \
    cd /core && \
    # TODO: This could cause compatibility issues. Need to establish a way to check earlier.
    python -m pip install --disable-pip-version-check -r requirements.txt && \
    python -m pip install --disable-pip-version-check --no-deps -e .
ENV PYTHONPATH=${PYTHONPATH}:/core
RUN python -c 'import merlin.core as mc; print("Merlin Core version:", mc.__version__)'



# -----------------------------------------------------------------------------
#   [ 5.2 ]   Build and install NVIDIA Merlin NVTabular.

ENV PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION='python'
RUN git clone --branch ${NVTAB_VER} --depth 1 https://github.com/NVIDIA-Merlin/NVTabular.git /nvtabular && \
    cd /nvtabular && \
    # TODO: This could cause compatibility issues. Need to establish a way to check earlier.
    python -m pip install --disable-pip-version-check $(cat requirements.txt | grep -v merlin-core) && \
    python -m pip install --disable-pip-version-check --no-deps -e . && \
    # Missing dependency required for running NVT.
    python -m pip install --disable-pip-version-check scipy
ENV PYTHONPATH=${PYTHONPATH}:/nvtabular
RUN python -c 'import nvtabular as nvt; print("Merlin NVTabular version:", nvt.__version__)'



# -----------------------------------------------------------------------------
#   [ 6 ]   Build and install HugeCTR.

# TODO: Potential savings: Do not install tests by default.

# Arguments "_XXXX" are only valid when $HUGECTR_DEV_MODE==false
ARG HUGECTR_DEV_MODE=false
ARG _HUGECTR_REPO="github.com/NVIDIA-Merlin/HugeCTR.git"
ARG _CI_JOB_TOKEN=""

# ENV CPATH=/usr/local/include:$CPATH
ENV OMPI_MCA_plm_rsh_agent=sh \
    OMPI_MCA_opal_cuda_support=true \
    NCCL_LAUNCH_MODE=PARALLEL \
    NCCL_COLLNET_ENABLE=0 \
    SHARP_COLL_NUM_COLL_GROUP_RESOURCE_ALLOC_THRESHOLD=0 \
    SHARP_COLL_LOCK_ON_COMM_INIT=1 \
    SHARP_COLL_LOG_LEVEL=3 \
    HCOLL_ENABLE_MCAST=0

# Fix build environment.
RUN if [[ ! -f "${CUDA_HOME}/lib64/libcuda.so.1" ]]; then \
        ln -s "${CUDA_HOME}/lib64/stubs/libcuda.so" "${CUDA_HOME}/lib64/libcuda.so.1" \
    ; fi && \
    x86_64_LIBS="/usr/lib/x86_64-linux-gnu" && \
    if [[ ! -f "${x86_64_LIBS}/libibverbs.so" ]]; then \
        ln -s "${x86_64_LIBS}/libibverbs.so.1" "${x86_64_LIBS}/libibverbs.so" \
    ; fi

# Build & install HugeCTR itself.
ARG HUGECTR_HOME=/usr/local/hugectr
RUN if [[ "${HUGECTR_DEV_MODE}" == "false" ]]; then \
        git clone --branch ${HUGECTR_VER} --depth 1 https://${_CI_JOB_TOKEN}${_HUGECTR_REPO} hugectr && \
        cd hugectr && \
        git submodule update --init --recursive && \
        mkdir build && \
        cd build && \
        if [[ -f /usr/local/lib/libhdfs.so ]]; then \
            cmake -DCMAKE_BUILD_TYPE=Release -DSM="60;61;70;75;80" -DENABLE_MULTINODES=ON -DENABLE_HDFS=ON .. \
        else \
            cmake -DCMAKE_BUILD_TYPE=Release -DSM="60;61;70;75;80" -DENABLE_MULTINODES=ON .. \
        ; fi && \
        make -j$(nproc) && \
        make install && \
        chmod +x ${HUGECTR_HOME}/bin/* && \
        chmod +x ${HUGECTR_HOME}/lib/*.so && \
        cd ../onnx_converter && \
        python setup.py install && \
        cd ../.. && \
        rm -rf hugectr && \
        python -c 'import hugectr2onnx as h2o; print("HugeCTR-2-ONNX version:", h2o.__version__)' \
    ; fi

ENV PATH=$PATH:${HUGECTR_HOME}/bin \
    LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${HUGECTR_HOME}/lib \
    PYTHONPATH=${PYTHONPATH}:${HUGECTR_HOME}/lib



# -----------------------------------------------------------------------------
#   [ 9 ]  Runtime customization.

HEALTHCHECK NONE
CMD ["/bin/bash"]
